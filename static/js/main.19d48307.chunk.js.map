{"version":3,"sources":["components/NavBar/NavBar.js","Pages/ProfilePage/ProfilePage.js","Pages/PostPage/PostPage.js","Pages/MessagePage/MessagePage.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","grow","props","classes","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","Button_default","href","ProfilePage","NavBar_NavBar","Pages_ProfilePage_ProfilePage","PostPage","PostPage_PostPage","MessagePage","MessagePage_MessagePage","App","BrowserRouter","basename","process","Switch","Route","exact","path","render","App_ProfilePage","App_PostPage","App_MessagePage","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAwCeA,2BAjCA,CACbC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,IA4BCF,CAxBf,SAAgBI,GAAO,IACbC,EAAYD,EAAZC,QACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQJ,MACtBK,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,SAASC,MAAM,WAC9BN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,KACED,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAYQ,QAAQ,KAAKH,MAAM,UAAUH,UAAWJ,EAAQF,MAA5D,oBAGAG,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQK,MAAM,UAAUK,KAAK,MAA7B,WAGAX,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQK,MAAM,UAAUK,KAAK,UAA7B,SAGAX,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQK,MAAM,UAAUK,KAAK,aAA7B,iBClBKC,MATf,SAAqBd,GACnB,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAYQ,QAAQ,MAApB,aCKSG,MATf,SAAqBd,GACnB,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAYQ,QAAQ,MAApB,WCKSG,MATf,SAAqBd,GACnB,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAYQ,QAAQ,MAApB,cCGAG,EAAc,kBAClBZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACY,EAAD,QAIEC,EAAW,kBACff,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAD,QAGEC,EAAc,kBAClBjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgB,EAAD,QAmBWC,mLAbX,OACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAeC,SAAUC,qBACvBtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM3B,EAAAC,EAAAC,cAAC0B,EAAD,SACpC5B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOE,KAAK,QAAQC,OAAQ,kBAAM3B,EAAAC,EAAAC,cAAC2B,EAAD,SAElC7B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOE,KAAK,WAAWC,OAAQ,kBAAM3B,EAAAC,EAAAC,cAAC4B,EAAD,kBAR7BC,aChBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASV,OAAO3B,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.19d48307.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nconst styles = {\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  }\n};\n\nfunction NavBar(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"inherit\">\n        <Toolbar>\n          <Typography variant=\"h5\" color=\"inherit\" className={classes.grow}>\n            Trustvocate.task\n          </Typography>\n          <Button color=\"inherit\" href=\"./\">\n            Profile\n          </Button>\n          <Button color=\"inherit\" href=\"./post\">\n            Posts\n          </Button>\n          <Button color=\"inherit\" href=\"./message\">\n            Messages\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(NavBar);\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n// Custom Imports\nimport __NavBar from \"../../components/NavBar/NavBar\";\nfunction ProfilePage(props) {\n  return (\n    <div>\n      <__NavBar />\n      <Typography variant=\"h1\">Profile</Typography>\n    </div>\n  );\n}\n\nexport default ProfilePage;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n// Custom Imports\nimport __NavBar from \"../../components/NavBar/NavBar\";\nfunction ProfilePage(props) {\n  return (\n    <div>\n      <__NavBar />\n      <Typography variant=\"h1\">Posts</Typography>\n    </div>\n  );\n}\n\nexport default ProfilePage;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n// Custom Imports\nimport __NavBar from \"../../components/NavBar/NavBar\";\nfunction ProfilePage(props) {\n  return (\n    <div>\n      <__NavBar />\n      <Typography variant=\"h1\">Messages</Typography>\n    </div>\n  );\n}\n\nexport default ProfilePage;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Router, Route, Link ,Switch} from \"react-router-dom\";\n\nimport classNames from \"classnames\";\n\n// Custom Imports\nimport \"./App.css\";\nimport __ProfilePage from \"./Pages/ProfilePage/ProfilePage\";\nimport __PostPage from \"./Pages/PostPage/PostPage\";\nimport __MessagePage from \"./Pages/MessagePage/MessagePage\";\n\nconst ProfilePage = () => (\n  <div>\n    <__ProfilePage />\n  </div>\n);\n\nconst PostPage = () => (\n  <div>\n    <__PostPage />\n  </div>\n);\nconst MessagePage = () => (\n  <div>\n    <__MessagePage />\n  </div>\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" render={() => <ProfilePage />} />\n          <Route path=\"/post\" render={() => <PostPage />} />\n\n          <Route path=\"/message\" render={() => <MessagePage />} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}